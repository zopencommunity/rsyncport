diff --git a/syscall.c b/syscall.c
index 34a9bba..fdd96cb 100644
--- a/syscall.c
+++ b/syscall.c
@@ -81,6 +81,68 @@ struct create_time {
 
 #define RETURN_ERROR_IF_RO_OR_LO RETURN_ERROR_IF(read_only || list_only, EROFS)
 
+#ifdef __MVS__
+#  define LINUX_S_IFIFO	      0010000	/* [XSI] named pipe (fifo) */
+#  define LINUX_S_IFCHR	      0020000	/* [XSI] character special */
+#  define LINUX_S_IFDIR	      0040000	/* [XSI] directory */
+#  define LINUX_S_IFBLK	      0060000   /* [XSI] block special */
+#  define LINUX_S_IFREG	      0100000   /* [XSI] regular */
+#  define LINUX_S_IFLNK	      0120000   /* [XSI] symbolic link */
+#  define LINUX_S_IFSOCK      0140000   /* [XSI] socket */
+
+#  define ZOS_S_IFIFO       0x04000000	/* named pipe (fifo) */
+#  define ZOS_S_IFCHR       0x02000000	/* character special */
+#  define ZOS_S_IFDIR       0x01000000	/* directory */
+#  define ZOS_S_IFBLK       0x06000000	/* block special */
+#  define ZOS_S_IFREG       0x03000000	/* regular */
+#  define ZOS_S_IFLNK       0x05000000	/* symbolic link */
+#  define ZOS_S_IFSOCK      0x07000000  /* socket */
+
+#  define ZOS_S_IFMT        0xFF000000  /* mask */
+
+/*
+ * z/OS has a 'mode_t' that is 32 bits in size, whereas
+ * Linux has a 'mode_t' that is 16 bits in size.
+ * The bottom 3 nibbles are the same, but z/OS uses
+ * the top word for the st_mode parts of mode and
+ * Linux uses the top nibble
+ */
+static inline mode_t 
+to_linux_mode(unsigned int inmode)
+{
+  mode_t outmode = (mode_t) (inmode & 0777);
+
+  if ((inmode & ZOS_S_IFMT) == ZOS_S_IFIFO) { outmode |= LINUX_S_IFIFO; }
+  if ((inmode & ZOS_S_IFMT) == ZOS_S_IFCHR) { outmode |= LINUX_S_IFCHR; }
+  if ((inmode & ZOS_S_IFMT) == ZOS_S_IFDIR) { outmode |= LINUX_S_IFDIR; }
+  if ((inmode & ZOS_S_IFMT) == ZOS_S_IFBLK) { outmode |= LINUX_S_IFBLK; }
+  if ((inmode & ZOS_S_IFMT) == ZOS_S_IFREG) { outmode |= LINUX_S_IFREG; }
+  if ((inmode & ZOS_S_IFMT) == ZOS_S_IFLNK) { outmode |= LINUX_S_IFLNK; }
+  if ((inmode & ZOS_S_IFMT) == ZOS_S_IFSOCK) { outmode |= LINUX_S_IFSOCK; }
+  return outmode;
+}
+
+static inline unsigned int
+to_zos_mode(mode_t inmode)
+{
+  unsigned int outmode = (unsigned int) (inmode & 0777);
+
+  if (inmode & LINUX_S_IFIFO) { outmode |= ZOS_S_IFIFO; }
+  if (inmode & LINUX_S_IFCHR) { outmode |= ZOS_S_IFCHR; }
+  if (inmode & LINUX_S_IFDIR) { outmode |= ZOS_S_IFDIR; }
+  if (inmode & LINUX_S_IFBLK) { outmode |= ZOS_S_IFBLK; }
+  if (inmode & LINUX_S_IFREG) { outmode |= ZOS_S_IFREG; }
+  if (inmode & LINUX_S_IFLNK) { outmode |= ZOS_S_IFLNK; }
+  if (inmode & LINUX_S_IFSOCK) { outmode |= ZOS_S_IFSOCK; }
+
+  return outmode;
+}
+
+#define to_native_mode(inmode) (to_zos_mode(inmode))
+#else
+#define to_native_mode(inmode) (inmode)
+#endif
+
 int do_unlink(const char *path)
 {
 	if (dry_run) return 0;
@@ -167,7 +229,7 @@ int do_mknod(const char *pathname, mode_t mode, dev_t dev)
 
 	/* For --fake-super, we create a normal file with mode 0600. */
 	if (am_root < 0) {
-		int fd = open(pathname, O_WRONLY|O_CREAT|O_TRUNC, S_IWUSR|S_IRUSR);
+		int fd = open(pathname, O_WRONLY|O_CREAT|O_TRUNC, to_native_mode(S_IWUSR|S_IRUSR));
 		if (fd < 0 || close(fd) < 0)
 			return -1;
 		return 0;
@@ -175,7 +237,7 @@ int do_mknod(const char *pathname, mode_t mode, dev_t dev)
 
 #if !defined MKNOD_CREATES_FIFOS && defined HAVE_MKFIFO
 	if (S_ISFIFO(mode))
-		return mkfifo(pathname, mode);
+		return mkfifo(pathname, to_native_mode(mode));
 #endif
 #if !defined MKNOD_CREATES_SOCKETS && defined HAVE_SYS_UN_H
 	if (S_ISSOCK(mode)) {
@@ -204,7 +266,7 @@ int do_mknod(const char *pathname, mode_t mode, dev_t dev)
 	}
 #endif
 #ifdef HAVE_MKNOD
-	return mknod(pathname, mode, dev);
+	return mknod(pathname, to_native_mode(mode), dev);
 #else
 	return -1;
 #endif
@@ -219,6 +281,7 @@ int do_rmdir(const char *pathname)
 
 int do_open(const char *pathname, int flags, mode_t mode)
 {
+  int fd;
 	if (flags != O_RDONLY) {
 		RETURN_ERROR_IF(dry_run, 0);
 		RETURN_ERROR_IF_RO_OR_LO;
@@ -229,7 +292,8 @@ int do_open(const char *pathname, int flags, mode_t mode)
 		flags |= O_NOATIME;
 #endif
 
-	return open(pathname, flags | O_BINARY, mode);
+	fd = open(pathname, flags | O_BINARY, to_native_mode(mode));
+  return fd;
 }
 
 #ifdef HAVE_CHMOD
@@ -244,7 +308,7 @@ int do_chmod(const char *path, mode_t mode)
 	switch (switch_step) {
 #ifdef HAVE_LCHMOD
 	case 0:
-		if ((code = lchmod(path, mode & CHMOD_BITS)) == 0)
+		if ((code = lchmod(path, to_native_mode(mode & CHMOD_BITS))) == 0)
 			break;
 		if (errno == ENOSYS)
 			switch_step++;
@@ -256,7 +320,7 @@ int do_chmod(const char *path, mode_t mode)
 		if (S_ISLNK(mode)) {
 # if defined HAVE_SETATTRLIST
 			struct attrlist attrList;
-			uint32_t m = mode & CHMOD_BITS; /* manpage is wrong: not mode_t! */
+			uint32_t m = to_native_mode(mode & CHMOD_BITS); /* manpage is wrong: not mode_t! */
 
 			memset(&attrList, 0, sizeof attrList);
 			attrList.bitmapcount = ATTR_BIT_MAP_COUNT;
@@ -269,7 +333,7 @@ int do_chmod(const char *path, mode_t mode)
 			code = 1;
 # endif
 		} else
-			code = chmod(path, mode & CHMOD_BITS); /* DISCOURAGED FUNCTION */
+			code = chmod(path, to_native_mode(mode & CHMOD_BITS)); /* DISCOURAGED FUNCTION */
 		break;
 	}
 	if (code != 0 && (preserve_perms || preserve_executability))
@@ -324,7 +388,7 @@ int do_mkdir(char *path, mode_t mode)
 	if (dry_run) return 0;
 	RETURN_ERROR_IF_RO_OR_LO;
 	trim_trailing_slashes(path);
-	return mkdir(path, mode);
+	return mkdir(path, to_native_mode(mode));
 }
 
 /* like mkstemp but forces permissions */
@@ -339,7 +403,7 @@ int do_mkstemp(char *template, mode_t perms)
 		int fd = mkstemp(template);
 		if (fd == -1)
 			return -1;
-		if (fchmod(fd, perms) != 0 && preserve_perms) {
+		if (fchmod(fd, to_native_mode(perms)) != 0 && preserve_perms) {
 			int errno_save = errno;
 			close(fd);
 			unlink(template);
@@ -347,7 +411,7 @@ int do_mkstemp(char *template, mode_t perms)
 			return -1;
 		}
 #if defined HAVE_SETMODE && O_BINARY
-		setmode(fd, O_BINARY);
+		setmode(fd, to_native_mode(O_BINARY));
 #endif
 		return fd;
 	}
@@ -358,6 +422,35 @@ int do_mkstemp(char *template, mode_t perms)
 #endif
 }
 
+#ifdef __MVS__
+int do_stat(const char *path, STRUCT_STAT *st)
+{
+        int rc = stat(path, st);
+        if (!rc) {
+             st->st_mode = to_linux_mode(st->st_mode);
+        }
+        return rc;
+}
+
+int do_lstat(const char *path, STRUCT_STAT *st)
+{
+        int rc = lstat(path, st);
+        if (!rc) {
+             st->st_mode = to_linux_mode(st->st_mode);
+        }
+        return rc;
+}
+
+int do_fstat(int fd, STRUCT_STAT *st)
+{
+        int rc = fstat(fd, st);
+        if (!rc) {
+             st->st_mode = to_linux_mode(st->st_mode);
+        }
+        return rc;
+}
+#else
+
 int do_stat(const char *path, STRUCT_STAT *st)
 {
 #ifdef USE_STAT64_FUNCS
@@ -389,6 +482,8 @@ int do_fstat(int fd, STRUCT_STAT *st)
 #endif
 }
 
+#endif
+
 OFF_T do_lseek(int fd, OFF_T offset, int whence)
 {
 #ifdef HAVE_LSEEK64
